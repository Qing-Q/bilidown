#! /usr/bin/env node

/*
 * bilidown.js的可执行文件
 */
var bilidown = require('../lib/bilidown');

var command = require('commander');
command
  .version('1.3.1')
  .option('-u, --url [url]', 'The url of the video page')
  .option('-d, --dir [directory]', 'The directory to which videos will be saved (absolute or relative). '
      +'Default to the current execution directory.')
  .option('-n, --nth [page_number]', 'The number of the subpage you want to download the video from.'
    +'(In the case where one video page has multiple subpages) '
    +'Default to 1')
  .parse(process.argv);

var pageUrl = command['url'];
var saveDir = command['dir'];
var pageNumber = command['nth'];

if( !pageUrl ) exitWithError('请输入页面视频url');

// 保存路径默认为当前执行目录
saveDir = saveDir || '.';
pageNumber = pageNumber || 1;

// 要显示在命令行里面的文字
var sentence = '';

// 调用bilidown模块下载视频
bilidown.downloadPageVideo(pageUrl, pageNumber, saveDir)
  .on('downloading', function(progress){
    var current = progress.current;
    var total = progress.total;

    //清除上一句话
    clearStdout(unicodeLength(sentence));
    // 显示新的进度语句
    sentence = '已下载：'+(current/total*100).toFixed(2)+'%';
    process.stdout.write(sentence);
  })
  .on('end', function(){
    process.stdout.write('\n');
    console.log('下载完成');
  })
  .on('error', function(err){
    console.error(err);
  });

// 清除标准输出流中指定字节数的文字
function clearStdout(length){
  for(var i=0; i<length; i++){
    process.stdout.write('\b');
  }
}

// 获取一个字符串Unicode的字节数
function unicodeLength(str) {
  var totalLength = 0;
  var i;
  var charCode;

  for (i = 0; i < str.length; i++) {
    charCode = str.charCodeAt(i);
    if (charCode < 0x007f) {
      totalLength = totalLength + 1;
    }else if ((0x0080 <= charCode) && (charCode <= 0x07ff)) {
      totalLength += 2;
    }else if ((0x0800 <= charCode) && (charCode <= 0xffff)) {
      totalLength += 3;
    }
  }
  return totalLength;
}

/**
 * 错误退出函数
 * @param  {string} msg 错误信息
 */
function exitWithError(msg){
  console.error(msg);
  process.exit(1);
}
